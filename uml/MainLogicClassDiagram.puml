@startuml
'https://plantuml.com/class-diagram

class ToDoListModel {
    -Map<ListModel, DataState> lists

    +ToDoListModel(DataState db)

    +findList(String):ListModel
    +getList(ListModel):ListModel
    +findList(String):ListModel
    +addList(ListModel):void
    +deleteList(String):void
    +deleteList(ListModel):void
    +upload(Database):void
    +getLists():TreeSet<ListModel>
}

class Application {}

class TaskModel implements Comparable {
    -String name
    -LocalDate dueDate
    -String description
    -boolean isCompleted
    -Integer id

    +TaskModel(String)
    +TaskModel(String, LocalDate, String)

    +setName(String):void
    +setDueDate(LocalDate):void
    +setDescription(String):void
    +setCompletionState(boolean):void
    +setId(Integer):void

    +getName():String
    +getDueDate():LocalDate
    +getDescription():String
    +getCompletionState():boolean
    getId():Integer
}

class TaskPropertiesController {
    -ListController listController
    -String taskName
    -AnchorPane taskPropertiesView

    +TaskPropertiesController(String, ListController)
    +initialize:void

    #setClickOnDueDateClearButton():void
    #setClickOnTaskNameField():void
    +setClickOnDueDateButton():void
    +setClickOnDeleteButton():void
    #createDueDateClearButton():void
    #createCalendarButton(String):Button
    #createCalendarPane(Pane):VBox
    +setTaskPropertiesView(AnchorPane):void
    +getTaskPropertiesViews():AnchorPane
}

class DateFormatter {
    -df:DateFormatter

    -DateFormatter()

    +dateToString(LocalDate):String
    +stringToDate(String):LocalDate
}

class ToDoListController {
    -Database database;
    -TodoListModel todoListModel
    -HashMap<String, ListController> listViews;

    +initialize():void

    -initDayViewBtn(Button, String, LocalDate):void
    -dateToIconConverter(LocalDate):ImageView
    -exportDatabaseFile():void
    -importDatabaseFile():void
    +exitApplication():void
    -setFocusOnMainPaneWhenEnterKeyPressed():void
    +setClickOnSearchBarTextField():void
    +setClickOnShowListButton():void
    +setClickOnListButton():void
    +setClickOnNewListButton():void
    #initTextFieldValidatior(TextField, String):ContextMenu
    #reloadListScrollPane():void
    -createListView(String):ListController

    #setAnchorProperty(Node, Double, Double, Double, Double):void
    #hideNode(Node):void
    #showNode(Node):void
    #applyButtonStyle(MouseEvent, String):void
    #setCenterPropertyToDefault():void
    #getToDoListModel():ToDoListModel
    -setFocusOnMainPaneWhenMouseClicked():void
    +getListView(String):AnchorPane
}

class ListModel implements Comparable {
    -String listName
    -Integer id
    -Map<TaskModel, DataState> tasks

    +ListModel(String)
    +ListModel(String, int, Set<TaskModel> cachedTasks)

    +setListName(String):void
    +getTask(String):TaskModel
    +getTask(TaskModel):TaskModel
    +findTask(String):TaskModel
    +addTask(TaskModel):void
    +deleteTask(TaskModel):void
    +deleteTask(String):void
    +deleteAllTasks():void
    +upload(Database):void
    +clear():void

    +getId():Integer
    +getListName():String
    +getAllTasks():List<TaskModel>
    +getCompletedTasks():List<TaskModel>
    +getInProgressTasks():List<TaskModel>
}


class ListController {
    +ToDoListController toDoListController
    -HashMap<String, TaskPropertiesController> taskPropertiesView
    -String listName
    -AnchorPane listView

    +ListController(String, ToDoListController)
    +initialize():void

    #reloadTaskScrollPane():void
    +setClickOnListNameField():void
    +setClickOnMenuShowAll():void
    +setClickOnMenuShowCompleted():void
    +setClickOnMenuShowInProgress():void
    +setClickOnMenuDeleteAllTasks():void
    +setClickOnMenuDeleteList():void
    +setClickOnTaskButton(MouseEvent, String):void
    -createTaskPropertiesView(String):TaskPropertiesController
    +setClickOnTaskRadioButton(MouseEvent, String):void
    +setClickOnNewTaskButton():void
    +setTaskProgressBar():void
    #createTaskButton(TaskModel):void
    -applyTaskPaneStyle(RadioButton):void
    +findListModel():ListModel
    +getListModel():ListModel
    +setListView(AnchorPane):void
    +getListView():AnchorPane
    +getTaskPropertiesViews():HashMap<String, TaskPropertiesController>

}

class Database {
    -String connectionStringPrefix
    -String filePath

    +Database()

    +getFilePath():String
    +setCollection(String):void
    +getList():SortedSet<ListModel>
    +getTasks(String listName):SortedSet<TaskModel>
    +updateListListModel:void
    +deleteListListModel:void
    +updateTask(TaskModel, String):void
    +deleteTask(Task):void
}

enum DataState {
    Cached,
    Uncached,
    Removed
}

Application *--ToDoListController

ToDoListController *--- Database
ToDoListController *--- ToDoListModel
ToDoListController *- ListController

ListController *--- TaskPropertiesController
ListController o--- ToDoListController
ListController *--- ListModel
ListController *--- TaskModel

TaskPropertiesController o---- ListController
TaskPropertiesController --- DateFormatter

ToDoListModel *- DataState
ToDoListModel *-- ListModel
ToDoListModel -- Database

ListModel *--- TaskModel
ListModel *--- DataState
ListModel ---- Database

@enduml