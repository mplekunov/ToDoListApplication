@startuml
'https://plantuml.com/class-diagram

class ToDoList {
    -Map<ListManager, DataState> lists

    +ToDoList(DataState db)

    +findList(String):ListManager
    +addList(String):void
    +changeListName(String, String):void
    +deleteList(String)
    +upload:void
    +getLists():List<ListManager>
}

class Application {}

class Task implements Comparable {
    -String name
    -LocalDate dueDate
    -String description
    -boolean isCompleted
    -Integer id

    +Task(String)
    +Task(String, LocalDate, String)

    +setName(String):void
    +setDueDate(LocalDate):void
    +setDescription(String):void
    +setCompletionState(boolean):void
    +setId(Integer):void

    +getName():String
    +getDueDate():LocalDate
    +getDescription():String
    +getCompletionState():boolean
    getId():Integer
}

class TaskPropertiesController {
    -ListController listController
    -Task task

    +TaskPropertiesController(Task, ListController)
    +initialize:void

    #setDueDateClearBtn():void
    +rightBackBtnClicked():void
    +rightAddDueDateBtnClicked():void
    +rightDeleteBtnClicked():void
    +createDueDateClearBtn()
    +createCalendarBtn(String):Button
    +createCalendar(Pane,Task):VBox
}

class DateFormatter {
    -df:DateFormatter

    -DateFormatter()

    +dateToString(LocalDate):String
    +stringToDate(String):LocalDate
}

class ToDoListController {
    -AnchorPane todayView
    -Database database
    -ToDoList todoList
    -ListController listController

    +initialize():void

    -initDayViewBtn(Button, String, LocalDate):void
    -dateToIconConverter(LocalDate):ImageView
    -exportDatabaseFile():void
    -importDatabaseFile():void
    +exitApplication():void
    -setFocusResetOnEnterPressed():void
    -topSearchBarReleased():void
    -leftShownListsBtnClicked():void
    -leftListBtnClicked():void
    -leftNewListBtnClicked():void
    #initTextFieldValidator(TextField):ContextMenu
    #updateListScrollPane():void
    -createListView(ListManager):void
    -createLeftListBtn(String):void

    #setAnchorProperty(Node, Double, Double, Double, Double):void
    #hideNode(Node):void
    #showNode(Node):void
    #btnStyle(MouseEvent, String):void

    #setCenterPropertyToDefault():void
    #getToDoList():ToDoList
    -setFocusResetOnMouseClick():void
}

class ListManager implements Comparable {
    -String listName
    -Integer id
    -Map<Task, DataState> tasks

    +ListManager(String)
    +ListManager(String, int, Set<Task> cachedTasks)

    +setListName(String):void
    +setId(Integer):void
    +findTask(String):Task
    +addTask(String):void
    +changeTaskName(String, String):void
    +changeTaskCompletionState(String, state):void
    +changeTaskDueDate(String, LocalDate):void
    +changeTaskNote(String, String):void
    +deleteTask:void
    +upload:void

    +getId():Integer
    +getListName():String
    +getAllTasks():List<Task>
    +getCompletedTasks():List<Task>
    +getInProgressTasks():List<Task>
}


class ListController {
    -ToDoListController toDoListController
    -ListManager listManager
    -TaskPropertiesController taskProperties

    +ListController(ListManager, ToDoListController)
    +initialize():void

    #updateTaskScrollPane():void
    +listNameFieldClicked:void
    +menuShowAllClicked:void
    +menuShowCompletedClicked:void
    +menuShowInProgressClicked:void
    +menuDeleteAllTasksClicked:void
    +menuDeleteListClicked:void
    +centerTaskBtnClicked:void
    -createTaskPropertiesView(Task):void
    +centerTaskRadioBtnClicked(MouseEvent, String):void
    +centerNewTaskBtnClicked(MouseEvent):void
    -setTaskProgressBar():void
    #createTaskBtn(String):void
    -taskPaneStyle(RadioButton):void
    +getListManager():ListManager
}

class DayController {
    -String labelName

    +DayController(String, ToDoListController)

    +initialize()
}

class Database {
    -String connectionStringPrefix
    -String filePath

    +Database()

    +getFilePath():String
    +setCollection(String):void
    +getList():SortedSet<ListManager>
    +getTasks(String listName):SortedSet<Task>
    +updateList(ListManager):void
    +deleteList(ListManager):void
    +updateTask(Task, String):void
    +deleteTask(Task):void
}

enum DataState {
    Cached,
    Uncached,
    Removed
}

ListManager *-- Task
ListManager *-- DataState
ListManager o-- Database
ToDoList *-- ListManager
ToDoList *-- DataState
ToDoList o-- Database

ToDoListController *-- Database
ToDoListController *-- ToDoList
ListController o-- ToDoListController
ListController *-- ListManager
ListController *-- TaskPropertiesController

Application *-- ToDoListController

@enduml